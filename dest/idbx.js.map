{
  "version": 3,
  "sources": ["../core/asyncRequest.ts", "../core/cursorHandler.ts", "../ops/add.ts", "../ops/clear.ts", "../ops/count.ts", "../ops/del.ts", "../ops/get.ts", "../ops/getAll.ts", "../ops/getAllKeys.ts", "../ops/getKey.ts", "../ops/getStore.ts", "../ops/iterate.ts", "../ops/openDB.ts", "../ops/put.ts"],
  "sourcesContent": ["export function asyncRequest<T>(\n  req: IDBRequest<T>,\n) {\n  return new Promise<T>((resolve, reject) => {\n    req.addEventListener(\"success\", (ev) => {\n      const target = ev.target as IDBRequest;\n      resolve(target.result);\n    });\n    req.addEventListener(\n      \"error\",\n      (ev) => {\n        const target = ev.target as IDBRequest;\n        reject(new Error(`IndexedDB error: ${target.error?.message}`));\n      },\n    );\n  });\n}\n", "export function cursorHandler(\n  store: IDBObjectStore,\n  onResult: (cursor: IDBCursorWithValue) => boolean | void,\n  onEnd?: () => void,\n): void {\n  const request = store.openCursor();\n  let ended = false;\n  // deno-lint-ignore no-explicit-any\n  request.onsuccess = (event: any) => {\n    const cursor = event.target?.result;\n    if (cursor && !ended) {\n      ended = onResult?.(cursor) ?? false;\n      if (ended) {\n        onEnd?.();\n      }\n    } else if (!ended) {\n      ended = true;\n      onEnd?.();\n    }\n  };\n\n  request.onerror = () => {\n    throw request.error;\n  };\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function add<T>(\n  store: IDBObjectStore,\n  item: T | T[],\n  key?: IDBValidKey,\n): Promise<IDBValidKey> {\n  if (Array.isArray(item)) {\n    return Promise.all(item.map((i) => asyncRequest(store.add(i, key))));\n  }\n  return asyncRequest(store.add(item, key));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function clear(store: IDBObjectStore) {\n  return asyncRequest(store.clear());\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function count(store: IDBObjectStore, query?: IDBValidKey | IDBKeyRange) {\n  return asyncRequest(store.count(query));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function del(\n  store: IDBObjectStore,\n  query: IDBValidKey | IDBKeyRange,\n) {\n  if (Array.isArray(query)) {\n    return Promise.all(query.map((q) => asyncRequest(store.delete(q))));\n  }\n  return asyncRequest(store.delete(query));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function get<T>(store: IDBObjectStore, query: IDBValidKey | IDBKeyRange) {\n  // indexeddb get operation\n  return asyncRequest<T | undefined>(store.get(query));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function getAll<T>(\n  store: IDBObjectStore,\n  query?: IDBValidKey | IDBKeyRange,\n  count?: number,\n) {\n  // indexeddb get operation\n  return asyncRequest<T[]>(store.getAll(query, count));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function getAllKeys(\n  store: IDBObjectStore,\n  query?: IDBValidKey | IDBKeyRange,\n  count?: number,\n) {\n  // indexeddb get operation\n  return asyncRequest<IDBValidKey[]>(store.getAllKeys(query, count));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function getKey(store: IDBObjectStore, query: IDBValidKey | IDBKeyRange) {\n  // indexeddb get operation\n  return asyncRequest<IDBValidKey | undefined>(store.getKey(query));\n}\n", "export function getStore(\n  db: IDBDatabase,\n  storeName: string,\n  mode: IDBTransactionMode = \"readonly\",\n) {\n  const transaction = db.transaction([storeName], mode);\n  const store = transaction.objectStore(storeName);\n  return store;\n}\n", "import { cursorHandler } from \"../core/cursorHandler.ts\";\n\nexport function iterate<T>(store: IDBObjectStore): AsyncIterable<T> {\n  let _promise: Promise<T>;\n  let _resolve: (value: T) => void;\n  let _reject: (reason?: unknown) => void;\n\n  let next: (() => Promise<T>) | void = () => {\n    _promise = new Promise<T>((resolve, reject) => {\n      _resolve = resolve;\n      _reject = reject;\n    });\n    return _promise;\n  };\n\n  cursorHandler(store, (cursor) => {\n    const value = cursor.value as T;\n    _resolve(value);\n    if (next) {\n      _promise.then(next);\n    }\n    cursor.continue();\n  }, () => (next = undefined));\n  return {\n    async *[Symbol.asyncIterator]() {\n      while (true) {\n        if (next) {\n          try {\n            const result = await next();\n            yield result;\n          } catch (error) {\n            throw error;\n          }\n        } else {\n          break;\n        }\n      }\n    },\n  };\n}\n", "interface IDBXOpenOptions {\n  version?: number;\n  upgrade?: (db: IDBDatabase, event: IDBVersionChangeEvent) => void;\n  blocked?: (event: Event) => void;\n}\n\nexport function openDB(name: string, options: IDBXOpenOptions = {}) {\n  const request = indexedDB.open(name, options.version);\n\n  request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n    if (options.upgrade) {\n      // deno-lint-ignore no-explicit-any\n      const db = (event.target as any).result;\n      options.upgrade(db, event);\n    }\n  };\n\n  if (options.blocked) {\n    request.onblocked = options.blocked;\n  }\n\n  return new Promise<IDBDatabase>((resolve, reject) => {\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function put<T>(store: IDBObjectStore, item: T | T[], key?: IDBValidKey) {\n  if (Array.isArray(item)) {\n    return Promise.all(item.map((i) => asyncRequest(store.put(i, key))));\n  }\n  return asyncRequest(store.put(item, key));\n}\n"],
  "mappings": "AAAO,SAASA,EACdC,EACA,CACA,OAAO,IAAI,QAAW,CAACC,EAASC,IAAW,CACzCF,EAAI,iBAAiB,UAAYG,GAAO,CACtC,IAAMC,EAASD,EAAG,OAClBF,EAAQG,EAAO,MAAM,CACvB,CAAC,EACDJ,EAAI,iBACF,QACCG,GAAO,CACN,IAAMC,EAASD,EAAG,OAClBD,EAAO,IAAI,MAAM,oBAAoBE,EAAO,OAAO,OAAO,EAAE,CAAC,CAC/D,CACF,CACF,CAAC,CACH,CChBO,SAASC,EACdC,EACAC,EACAC,EACM,CACN,IAAMC,EAAUH,EAAM,WAAW,EAC7BI,EAAQ,GAEZD,EAAQ,UAAaE,GAAe,CAClC,IAAMC,EAASD,EAAM,QAAQ,OACzBC,GAAU,CAACF,GACbA,EAAQH,IAAWK,CAAM,GAAK,GAC1BF,GACFF,IAAQ,GAEAE,IACVA,EAAQ,GACRF,IAAQ,EAEZ,EAEAC,EAAQ,QAAU,IAAM,CACtB,MAAMA,EAAQ,KAChB,CACF,CCtBO,SAASI,EACdC,EACAC,EACAC,EACsB,CACtB,OAAI,MAAM,QAAQD,CAAI,EACb,QAAQ,IAAIA,EAAK,IAAKE,GAAMC,EAAaJ,EAAM,IAAIG,EAAGD,CAAG,CAAC,CAAC,CAAC,EAE9DE,EAAaJ,EAAM,IAAIC,EAAMC,CAAG,CAAC,CAC1C,CCTO,SAASG,EAAMC,EAAuB,CAC3C,OAAOC,EAAaD,EAAM,MAAM,CAAC,CACnC,CCFO,SAASE,EAAMC,EAAuBC,EAAmC,CAC9E,OAAOC,EAAaF,EAAM,MAAMC,CAAK,CAAC,CACxC,CCFO,SAASE,EACdC,EACAC,EACA,CACA,OAAI,MAAM,QAAQA,CAAK,EACd,QAAQ,IAAIA,EAAM,IAAKC,GAAMC,EAAaH,EAAM,OAAOE,CAAC,CAAC,CAAC,CAAC,EAE7DC,EAAaH,EAAM,OAAOC,CAAK,CAAC,CACzC,CCRO,SAASG,EAAOC,EAAuBC,EAAkC,CAE9E,OAAOC,EAA4BF,EAAM,IAAIC,CAAK,CAAC,CACrD,CCHO,SAASE,EACdC,EACAC,EACAC,EACA,CAEA,OAAOC,EAAkBH,EAAM,OAAOC,EAAOC,CAAK,CAAC,CACrD,CCPO,SAASE,EACdC,EACAC,EACAC,EACA,CAEA,OAAOC,EAA4BH,EAAM,WAAWC,EAAOC,CAAK,CAAC,CACnE,CCPO,SAASE,EAAOC,EAAuBC,EAAkC,CAE9E,OAAOC,EAAsCF,EAAM,OAAOC,CAAK,CAAC,CAClE,CCLO,SAASE,EACdC,EACAC,EACAC,EAA2B,WAC3B,CAGA,OAFoBF,EAAG,YAAY,CAACC,CAAS,EAAGC,CAAI,EAC1B,YAAYD,CAAS,CAEjD,CCNO,SAASE,EAAWC,EAAyC,CAClE,IAAIC,EACAC,EACAC,EAEAC,EAAkC,KACpCH,EAAW,IAAI,QAAW,CAACI,EAASC,IAAW,CAC7CJ,EAAWG,EACXF,EAAUG,CACZ,CAAC,EACML,GAGT,OAAAM,EAAcP,EAAQQ,GAAW,CAC/B,IAAMC,EAAQD,EAAO,MACrBN,EAASO,CAAK,EACVL,GACFH,EAAS,KAAKG,CAAI,EAEpBI,EAAO,SAAS,CAClB,EAAG,IAAOJ,EAAO,MAAU,EACpB,CACL,OAAQ,OAAO,aAAa,GAAI,CAC9B,KACMA,GACF,GAAI,CAEF,MADe,MAAMA,EAAK,CAE5B,OAASM,EAAP,CACA,MAAMA,CACR,CAKN,CACF,CACF,CCjCO,SAASC,EAAOC,EAAcC,EAA2B,CAAC,EAAG,CAClE,IAAMC,EAAU,UAAU,KAAKF,EAAMC,EAAQ,OAAO,EAEpD,OAAAC,EAAQ,gBAAmBC,GAAiC,CAC1D,GAAIF,EAAQ,QAAS,CAEnB,IAAMG,EAAMD,EAAM,OAAe,OACjCF,EAAQ,QAAQG,EAAID,CAAK,CAC3B,CACF,EAEIF,EAAQ,UACVC,EAAQ,UAAYD,EAAQ,SAGvB,IAAI,QAAqB,CAACI,EAASC,IAAW,CACnDJ,EAAQ,UAAY,IAAMG,EAAQH,EAAQ,MAAM,EAChDA,EAAQ,QAAU,IAAMI,EAAOJ,EAAQ,KAAK,CAC9C,CAAC,CACH,CCvBO,SAASK,EAAOC,EAAuBC,EAAeC,EAAmB,CAC9E,OAAI,MAAM,QAAQD,CAAI,EACb,QAAQ,IAAIA,EAAK,IAAKE,GAAMC,EAAaJ,EAAM,IAAIG,EAAGD,CAAG,CAAC,CAAC,CAAC,EAE9DE,EAAaJ,EAAM,IAAIC,EAAMC,CAAG,CAAC,CAC1C",
  "names": ["asyncRequest", "req", "resolve", "reject", "ev", "target", "cursorHandler", "store", "onResult", "onEnd", "request", "ended", "event", "cursor", "add", "store", "item", "key", "i", "asyncRequest", "clear", "store", "asyncRequest", "count", "store", "query", "asyncRequest", "del", "store", "query", "q", "asyncRequest", "get", "store", "query", "asyncRequest", "getAll", "store", "query", "count", "asyncRequest", "getAllKeys", "store", "query", "count", "asyncRequest", "getKey", "store", "query", "asyncRequest", "getStore", "db", "storeName", "mode", "iterate", "store", "_promise", "_resolve", "_reject", "next", "resolve", "reject", "cursorHandler", "cursor", "value", "error", "openDB", "name", "options", "request", "event", "db", "resolve", "reject", "put", "store", "item", "key", "i", "asyncRequest"]
}
