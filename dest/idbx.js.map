{
  "version": 3,
  "sources": ["../ops/open.ts", "../core/asyncRequest.ts", "../ops/add.ts", "../ops/addBulk.ts", "../ops/put.ts", "../ops/putBulk.ts", "../ops/del.ts", "../ops/delBulk.ts", "../ops/get.ts", "../ops/getAll.ts", "../ops/getAllKeys.ts", "../ops/getKey.ts", "../ops/clear.ts", "../ops/count.ts", "../ops/batch.ts"],
  "sourcesContent": ["export function open(name: string, version?: number) {\n  const request = indexedDB.open(name, version);\n\n  return {\n    upgrade: (callback: (event: IDBVersionChangeEvent) => void) => {\n      request.onupgradeneeded = callback;\n    },\n    blocked: (callback: (event: Event) => void) => {\n      request.onblocked = callback;\n    },\n    ready: new Promise<IDBDatabase>((resolve, reject) => {\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    }),\n  };\n}\n", "export function asyncRequest<T>(\n  req: IDBRequest<T>,\n) {\n  return new Promise<T>((resolve, reject) => {\n    req.addEventListener(\"success\", (ev) => {\n      const target = ev.target as IDBRequest;\n      resolve(target.result);\n    });\n    req.addEventListener(\n      \"error\",\n      (ev) => {\n        const target = ev.target as IDBRequest;\n        reject(new Error(`IndexedDB error: ${target.error?.message}`));\n      },\n    );\n  });\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function add<T>(store: IDBObjectStore, item: T, key?: IDBValidKey) {\n  return asyncRequest(store.add(item, key));\n}\n", "import { add } from \"./add.ts\";\n\nexport function addBulk<T>(\n  store: IDBObjectStore,\n  items: T[] = [],\n) {\n  return Promise.all(items.map((item) => add(store, item)));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function put<T>(store: IDBObjectStore, item: T, key?: IDBValidKey) {\n  return asyncRequest(store.put(item, key));\n}\n", "import { put } from \"./put.ts\";\n\nexport function putBulk<T>(\n  store: IDBObjectStore,\n  items: T[] = [],\n) {\n  return Promise.all(items.map((item) => put(store, item)));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function del(\n  store: IDBObjectStore,\n  query: IDBValidKey | IDBKeyRange,\n) {\n  return asyncRequest(store.delete(query));\n}\n", "import { del } from \"./del.ts\";\n\nexport function delBulk(\n  store: IDBObjectStore,\n  keys: Array<IDBValidKey | IDBKeyRange>,\n) {\n  return Promise.all(keys.map((key) => del(store, key)));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function get<T>(store: IDBObjectStore, query: IDBValidKey | IDBKeyRange) {\n  // indexeddb get operation\n  return asyncRequest<T | undefined>(store.get(query));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function getAll<T>(\n  store: IDBObjectStore,\n  query?: IDBValidKey | IDBKeyRange,\n  count?: number,\n) {\n  // indexeddb get operation\n  return asyncRequest<T[]>(store.getAll(query, count));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function getAllKeys(\n  store: IDBObjectStore,\n  query?: IDBValidKey | IDBKeyRange,\n  count?: number,\n) {\n  // indexeddb get operation\n  return asyncRequest<IDBValidKey[]>(store.getAllKeys(query, count));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function getKey(store: IDBObjectStore, query: IDBValidKey | IDBKeyRange) {\n  // indexeddb get operation\n  return asyncRequest<IDBValidKey | undefined>(store.getKey(query));\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function clear(store: IDBObjectStore) {\n  return asyncRequest(store.clear());\n}\n", "import { asyncRequest } from \"../core/asyncRequest.ts\";\n\nexport function count(store: IDBObjectStore, query?: IDBValidKey | IDBKeyRange) {\n  return asyncRequest(store.count(query));\n}\n", "// deno-lint-ignore-file no-explicit-any\n\ninterface IDBXAddCommand<T> {\n  storeName: string;\n  method: \"add\";\n  data: T | T[];\n  key?: IDBValidKey;\n}\n\ninterface IDBXPutCommand<T> {\n  storeName: string;\n  method: \"put\";\n  data: T | T[];\n  key?: IDBValidKey;\n}\n\ninterface IDBXDeleteKeys {\n  keys: IDBValidKey[];\n}\n\ninterface IDBXDeleteKey {\n  key: IDBValidKey | IDBKeyRange;\n}\n\ninterface IDBXDeleteCommandBase {\n  storeName: string;\n  method: \"del\";\n}\n\ntype IDBXDeleteCommand =\n  & IDBXDeleteCommandBase\n  & (\n    | IDBXDeleteKeys\n    | IDBXDeleteKey\n  );\n\ninterface IDBXClearCommand {\n  storeName: string;\n  method: \"clear\";\n}\n\ninterface IDBXGetCommand {\n  storeName: string;\n  method: \"get\";\n  query: IDBValidKey;\n}\n\ninterface IDBXGetAllCommand {\n  storeName: string;\n  method: \"getAll\";\n  query?: IDBValidKey | IDBKeyRange;\n  count?: number;\n}\n\ninterface IDBXGetAllKeysCommand {\n  storeName: string;\n  method: \"getAllKeys\";\n  query: IDBValidKey | IDBKeyRange;\n  count?: number;\n}\n\ninterface IDBXGetKeyCommand {\n  storeName: string;\n  method: \"getKey\";\n  query: IDBValidKey;\n}\n\ninterface IDBXCountCommand {\n  storeName: string;\n  method: \"count\";\n  query: IDBValidKey | IDBKeyRange;\n}\n\ntype IDBXCommand<T> =\n  | IDBXAddCommand<T>\n  | IDBXPutCommand<T>\n  | IDBXDeleteCommand\n  | IDBXClearCommand\n  | IDBXGetCommand\n  | IDBXGetAllCommand\n  | IDBXGetAllKeysCommand\n  | IDBXGetKeyCommand\n  | IDBXCountCommand;\n\nfunction read<T>(\n  emit: IDBRequest<T>,\n  method: keyof IDBXBatchResult<T>,\n  results: IDBXBatchResultItem[],\n) {\n  const index = results.length;\n  results.push([method, undefined as any]);\n  emit.onsuccess = (event) => {\n    const value = (event.target as IDBRequest<T>).result;\n    results[index] = [method, value === undefined ? true : value];\n  };\n  emit.onerror = () => {\n    results[index] = [method, false];\n  };\n}\n\ninterface IDBXBatchResult<T> {\n  add: number;\n  put: number;\n  del: boolean;\n  clear: boolean;\n  get: T;\n  getAll: T[];\n  getAllKeys: IDBValidKey[];\n  getKey: IDBValidKey;\n  count: number;\n}\n\ntype IDBXBatchResultItem<\n  T = any,\n  K extends keyof IDBXBatchResult<T> = keyof IDBXBatchResult<T>,\n> = [\n  K,\n  IDBXBatchResult<T>[K],\n];\n\nexport function batch<T>(\n  db: IDBDatabase,\n  commands: IDBXCommand<T>[],\n  mode: IDBTransactionMode,\n) {\n  const set = new Set(commands.map((c) => c.storeName));\n  const storeNames = Array.from(set);\n\n  const tx = db.transaction(storeNames, mode);\n  const results: IDBXBatchResultItem[] = [];\n  for (const command of commands) {\n    const store = tx.objectStore(command.storeName);\n    switch (command.method) {\n      case \"add\": {\n        const { data, key } = command;\n        if (Array.isArray(data)) {\n          for (const item of data) {\n            read(store.add(item, key), \"add\", results);\n          }\n        } else {\n          read(store.add(data, key), \"add\", results);\n        }\n        break;\n      }\n      case \"put\": {\n        const { data, key } = command;\n        if (Array.isArray(data)) {\n          for (const item of data) {\n            read(store.put(item, key), \"put\", results);\n          }\n        } else {\n          read(store.put(data, key), \"put\", results);\n        }\n        break;\n      }\n      case \"del\": {\n        if (\"keys\" in command) {\n          for (const key of command.keys) {\n            read(store.delete(key), \"del\", results);\n          }\n        } else if (\"key\" in command) {\n          read(store.delete(command.key), \"del\", results);\n        }\n        break;\n      }\n      case \"clear\": {\n        read(store.clear(), \"clear\", results);\n        break;\n      }\n      case \"get\": {\n        const { query } = command;\n        read(store.get(query), \"get\", results);\n        break;\n      }\n      case \"getAll\": {\n        const { query, count } = command;\n        read(store.getAll(query, count), \"getAll\", results);\n        break;\n      }\n      case \"getAllKeys\": {\n        const { query, count } = command;\n        read(store.getAllKeys(query, count), \"getAllKeys\", results);\n        break;\n      }\n      case \"getKey\": {\n        const { query } = command;\n        read(store.getKey(query), \"getKey\", results);\n        break;\n      }\n      case \"count\": {\n        const { query } = command;\n        read(store.count(query), \"count\", results);\n        break;\n      }\n    }\n  }\n  // tx.commit();\n  return {\n    abort: () => tx.abort(),\n    completed: new Promise((resolve, reject) => {\n      tx.oncomplete = () => resolve(results);\n      tx.onerror = () => reject(tx.error);\n    }),\n  } as const as {\n    abort: () => void;\n    completed: Promise<IDBXBatchResultItem<T>[]>;\n  };\n}\n"],
  "mappings": "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",
  "names": ["open", "name", "version", "request", "callback", "resolve", "reject", "asyncRequest", "req", "resolve", "reject", "ev", "target", "add", "store", "item", "key", "asyncRequest", "addBulk", "store", "items", "item", "add", "put", "store", "item", "key", "asyncRequest", "putBulk", "store", "items", "item", "put", "del", "store", "query", "asyncRequest", "delBulk", "store", "keys", "key", "del", "get", "store", "query", "asyncRequest", "getAll", "store", "query", "count", "asyncRequest", "getAllKeys", "store", "query", "count", "asyncRequest", "getKey", "store", "query", "asyncRequest", "clear", "store", "asyncRequest", "count", "store", "query", "asyncRequest", "read", "emit", "method", "results", "index", "event", "value", "batch", "db", "commands", "mode", "set", "c", "storeNames", "tx", "command", "store", "data", "key", "item", "query", "count", "resolve", "reject"]
}
